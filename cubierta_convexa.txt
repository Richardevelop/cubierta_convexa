from matplotlib import pyplot as plt
from random import randint
from math import atan2

# Devuelve una lista de coordenadas (x,y) de longitud 'n puntos',
# cada coordenada 'x' e 'y' se elige aleatoriamente del rango 'min' hasta 'max'.
def create_points(ct,min=0,max=50):
	return [[randint(min,max),randint(min,max)] \
			for _ in range(ct)]


# Crea un diagrama de dispersión, la entrada es una lista de coordenadas (x, y).
# La segunda entrada 'convex_hull' es otra lista de coordenadas (x,y)
# que consta de esos puntos en 'coords' que forman el casco convexo, si no es Ninguno,
# los elementos de esta lista se utilizarán para dibujar el límite exterior (el casco convexo que rodea los puntos de datos).
def scatter_plot(coords,convex_hull=None):
	xs,ys=zip(*coords) # descomprime en 'x' e 'y' las coordenadas
	plt.scatter(xs,ys) # grafica los puntos

	if convex_hull!=None:
		# Traza el límite del casco convexo, iteración adicional al
		# final para que la línea delimitadora se ajuste
		for i in range(1,len(convex_hull)+1):
			if i==len(convex_hull): i=0 # wrap
			c0=convex_hull[i-1]
			c1=convex_hull[i]
			plt.plot((c0[0],c1[0]),(c0[1],c1[1]),'r')
	plt.show()

# Devuelve el ángulo polar (radianes) de p0 a p1.
# Si p1 es Ninguno, el valor predeterminado es reemplazarlo 
# con la variable global 'ancla(anchor)', normalmente configurada en la función 'graham_scan'.
def polar_angle(p0,p1=None):
	if p1==None: p1=anchor
	y_span=p0[1]-p1[1]
	x_span=p0[0]-p1[0]
	return atan2(y_span,x_span)

# Devuelve la distancia euclidiana de p0 a p1, la raíz cuadrada no se aplica por motivos de velocidad.
# Si p1 es Ninguno, el valor predeterminado es reemplazarlo 
# con la variable global 'ancla(anchor)', normalmente configurada en la función 'graham_scan'.
def distance(p0,p1=None):
	if p1==None: p1=anchor
	y_span=p0[1]-p1[1]
	x_span=p0[0]-p1[0]
	return y_span**2 + x_span**2

# Devuelve el determinante de la matriz 3x3
# 	[p1(x) p1(y) 1]
#	[p2(x) p2(y) 1]
# 	[p3(x) p3(y) 1]
# If >0 en sentido antihorario
# If <0 sentido horario
# If =0 colineal
def det(p1,p2,p3):
	return   (p2[0]-p1[0])*(p3[1]-p1[1]) \
			-(p2[1]-p1[1])*(p3[0]-p1[0])



# Ordena en orden creciente de ángulo polar desde el punto de 'anchor'.
# Se supone que la variable 'ancla' es global, configurada desde dentro de 'graham_scan'.
# Para cualquier valor con ángulos polares iguales, se aplica una segunda clasificación para 
# garantizar una distancia creciente desde el punto de 'anchor'.
def quicksort(a):
	if len(a)<=1: return a
	smaller,equal,larger=[],[],[]
	piv_ang=polar_angle(a[randint(0,len(a)-1)]) # select random pivot
	for pt in a:
		pt_ang=polar_angle(pt) # calculate current point angle
		if   pt_ang<piv_ang:  smaller.append(pt)
		elif pt_ang==piv_ang: equal.append(pt)
		else: 				  larger.append(pt)
	return   quicksort(smaller) \
			+sorted(equal,key=distance) \
			+quicksort(larger)


# Returns the vertices comprising the boundaries of
# convex hull containing all points in the input set. 
# The input 'points' is a list of (x,y) coordinates.
# If 'show_progress' is set to True, the progress in 
# constructing the hull will be plotted on each iteration.
# Devuelve los vértices que comprenden los límites del casco convexo
# que contiene todos los puntos del conjunto de entrada.
# Los 'puntos' de entrada son una lista de coordenadas (x,y).
# Si 'show_progress' se establece en True, el progreso en la construcción del casco se trazará en cada iteración.
def graham_scan(points,show_progress=False):
	global anchor # se establece con el valor mas pequeñp en (x,y)

	# Encuentra el punto (x,y) con el valor y más bajo,
	# junto con su índice en la lista de 'puntos'.
	# Si hay varios puntos con el mismo valor de y, se elije el que tenga la x más pequeña.
	min_idx=None
	for i,(x,y) in enumerate(points):
		if min_idx==None or y<points[min_idx][1]:
			min_idx=i
		if y==points[min_idx][1] and x<points[min_idx][0]:
			min_idx=i

	# establece la variable global 'anchor', utilizada por las funciones 'polar_angle' y 'distance'
	anchor=points[min_idx]

	# ordene los puntos por ángulo polar y luego elimine el ancla de la lista ordenada
	sorted_pts=quicksort(points)
	del sorted_pts[sorted_pts.index(anchor)]

	# el ancla y el punto con el ángulo polar más pequeño siempre estarán en el casco
	hull=[anchor,sorted_pts[0]]
	for s in sorted_pts[1:]:
		while det(hull[-2],hull[-1],s)<=0:
			del hull[-1]
		hull.append(s)
		if show_progress: scatter_plot(points,hull)
	return hull

pts=create_points(10)
print ("Points:",pts)
hull=graham_scan(pts,True)
print ("Hull:",hull)
scatter_plot(pts,hull)